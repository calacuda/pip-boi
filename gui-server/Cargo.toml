[package]
name = "pip-boi-daemon"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1"
http = { version = "1.0.0", optional = true }
leptos = { version = "0.6", features = ["nightly"] }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_actix = { version = "0.6.11", optional = true, features = [] }
leptos_router = { version = "0.6", features = ["nightly"] }
wasm-bindgen = "=0.2.92"
pip-boi-api = { version = "0.1.0", path = "../api" }
serde = { version = "1.0.198", features = ["derive"] }
leptos_server_signal = "0.6.0"
actix-ws = { version = "0.2.5", optional = true }
console_log = { version = "1.0.0", optional = true }
log = "0.4.21"
serde_json = "1.0.116"
anyhow = "1.0.82"
reqwest = "0.12.4"
actix = { version = "0.13.3", optional = true }
actix-web-actors = { version = "4.3.0", optional = true }
actix-broker = { version = "0.4.3", optional = true }
slippy-map-tiles = "0.16.0"
leptos-use = { version = "0.10.9" }
chrono = { version = "0.4.38", features = ["serde"] }
queues = "1.1.0"
# web-sys = { version = "0.3.69", features = ["Element"], optional = true }

[features]
default = ["csr", "hydrate", "ssr"]
csr = ["leptos/csr", "leptos_meta/csr", "leptos_router/csr", "dep:console_log"]
hydrate = [
  "leptos/hydrate",
  "leptos_meta/hydrate",
  "leptos_router/hydrate",
  "dep:console_log",
  # "dep:web-sys",
]
ssr = [
  "dep:actix-files",
  "dep:actix-web",
  "dep:leptos_actix",
  "dep:actix-ws",
  "dep:actix",
  "dep:actix-web-actors",
  "dep:actix-broker",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "leptos_server_signal/ssr",
  "leptos_server_signal/actix",
  "leptos-use/ssr",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

# [workspace]
# members = ["src-tauri"]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "pip-boi-daemon"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
